// Copyright The Shipwright Contributors
//
// SPDX-License-Identifier: Apache-2.0

package image_test

import (
	"context"
	"os"
	"path"

	buildapi "github.com/shipwright-io/build/pkg/apis/build/v1beta1"
	"github.com/shipwright-io/build/pkg/image"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/onsi/gomega/types"
)

var (
	vulnOptions     buildapi.VulnerabilityScanOptions
	directory       string
	vulnerableImage string
)

var _ = Describe("Vulnerability Scanning", func() {

	Context("For a single image in registry", func() {
		BeforeEach(func() {
			vulnOptions = buildapi.VulnerabilityScanOptions{
				Enabled: true,
			}
			vulnerableImage = "ghcr.io/shipwright-io/shipwright-samples/node:12"
		})

		It("runs the image vulnerability scan", func() {
			vulns, err := image.RunVulnerabilityScan(context.TODO(), vulnerableImage, vulnOptions, nil, false, false, 20)
			Expect(err).ToNot(HaveOccurred())
			Expect(vulns).ToNot(BeEmpty())
		})
	})

	Context("For an image index in a directory", func() {
		BeforeEach(func() {
			vulnOptions = buildapi.VulnerabilityScanOptions{
				Enabled: true,
			}
			cwd, err := os.Getwd()
			Expect(err).ToNot(HaveOccurred())
			directory = path.Clean(path.Join(cwd, "../..", "test/data/images/vuln-image-in-oci"))
		})

		It("runs the image vulnerability scan", func() {
			vulns, err := image.RunVulnerabilityScan(context.TODO(), directory, vulnOptions, nil, false, true, 20)
			Expect(err).ToNot(HaveOccurred())
			Expect(vulns).ToNot(BeEmpty())
		})
	})

	Context("For a single image in a directory", func() {
		BeforeEach(func() {
			cwd, err := os.Getwd()
			Expect(err).ToNot(HaveOccurred())
			directory = path.Clean(path.Join(cwd, "../..", "test/data/images/vuln-single-image/vuln-image.tar"))
		})

		It("runs the image vulnerability scan", func() {
			vulns, err := image.RunVulnerabilityScan(context.TODO(), directory, buildapi.VulnerabilityScanOptions{}, nil, false, true, 20)
			Expect(err).ToNot(HaveOccurred())
			Expect(vulns).ToNot(BeEmpty())
		})

		It("should ignore the severity defined in ignore options", func() {
			ignoreSeverity := buildapi.IgnoredLow
			vulnOptions := buildapi.VulnerabilityScanOptions{
				Enabled: true,
				Ignore: &buildapi.VulnerabilityIgnoreOptions{
					Severity: &ignoreSeverity,
				},
			}
			vulns, err := image.RunVulnerabilityScan(context.TODO(), directory, vulnOptions, nil, false, true, 20)
			Expect(err).ToNot(HaveOccurred())
			Expect(vulns).ToNot(BeEmpty())
			Expect(vulns).ToNot(containsSeverity("LOW"))
		})

		It("should ignore the vulnerabilities defined in ignore options", func() {
			unfixed := true
			vulnOptions := buildapi.VulnerabilityScanOptions{
				Enabled: true,
				Ignore: &buildapi.VulnerabilityIgnoreOptions{
					ID: []string{
						"CVE-2018-20843",
					},
					Unfixed: &unfixed,
				},
			}

			vulns, err := image.RunVulnerabilityScan(context.TODO(), directory, vulnOptions, nil, false, true, 20)
			Expect(err).ToNot(HaveOccurred())
			Expect(vulns).ToNot(BeEmpty())
			Expect(vulns).ToNot(containsVulnerability(vulnOptions.Ignore.ID[0]))
		})
	})

})

func containsVulnerability(vulnerability string) types.GomegaMatcher {
	return WithTransform(func(vulns []buildapi.Vulnerability) bool {
		for _, vuln := range vulns {
			if vuln.ID == vulnerability {
				return true
			}
		}
		return false
	}, BeTrue())
}

func containsSeverity(severity buildapi.VulnerabilitySeverity) types.GomegaMatcher {
	return WithTransform(func(vulns []buildapi.Vulnerability) bool {
		for _, vuln := range vulns {
			if vuln.Severity == severity {
				return true
			}
		}
		return false
	}, BeTrue())
}
